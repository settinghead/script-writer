import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useParams, useNavigate, useSearchParams } from 'react-router-dom';
import { Button, Typography, Spin, Alert, Card, Divider, Input, InputNumber, Form, Space, notification } from 'antd';
import { ArrowLeftOutlined, SendOutlined, FileTextOutlined } from '@ant-design/icons';
import StoryInspirationEditor from './StoryInspirationEditor';

const { Title, Text, Paragraph } = Typography;

interface OutlineData {
    title: string;
    genre: string;
    sellingPoints: string;
    setting: string;
    synopsis: string;
    characters: Array<{ name: string; description: string }>;
}

interface OutlineSessionData {
    sessionId: string;
    ideationSessionId: string;
    status: 'active' | 'completed';
    userInput?: string;
    outline?: OutlineData;
    createdAt: string;
}

const OutlineTab: React.FC = () => {
    const { id: outlineId } = useParams<{ id: string }>();
    const [searchParams] = useSearchParams();
    const navigate = useNavigate();

    // URL parameters
    const artifactId = searchParams.get('artifact_id');

    // State management
    const [currentUserInput, setCurrentUserInput] = useState('');
    const [currentArtifactId, setCurrentArtifactId] = useState<string | null>(artifactId);
    const [isLoading, setIsLoading] = useState(false);
    const [isLoadingSession, setIsLoadingSession] = useState(false);
    const [error, setError] = useState<Error | null>(null);
    const [outlineSession, setOutlineSession] = useState<OutlineSessionData | null>(null);
    // New state for streaming
    const [streamingOutlineData, setStreamingOutlineData] = useState<Partial<OutlineData> | null>(null);
    const [outlineSessionIdFromStream, setOutlineSessionIdFromStream] = useState<string | null>(null);
    const eventSourceRef = useRef<EventSource | null>(null);

    // New state for outline generation options
    const [totalEpisodes, setTotalEpisodes] = useState<number | null>(50);
    const [episodeDuration, setEpisodeDuration] = useState<number | null>(2);

    // Determine if we're in creation mode or viewing mode
    const isCreationMode = !outlineId && artifactId;
    const isViewingMode = !!outlineId;

    // Load existing outline session if in viewing mode
    useEffect(() => {
        if (isViewingMode && outlineId) {
            loadOutlineSession(outlineId);
        }
    }, [outlineId, isViewingMode]);

    // Auto-generate outline when first navigating to creation mode with artifact_id
    /* REMOVED Auto-generation useEffect
    useEffect(() => {
        if (isCreationMode && currentArtifactId && !hasAutoGenerated && !isLoading) {
            console.log('Auto-generating outline for artifact:', currentArtifactId);
            setHasAutoGenerated(true);
            handleGenerateOutline();
        }
    }, [isCreationMode, currentArtifactId, hasAutoGenerated, isLoading]);
    */

    const loadOutlineSession = async (sessionId: string) => {
        setIsLoadingSession(true);
        setError(null);

        try {
            const response = await fetch(`/api/outlines/${sessionId}`);

            if (!response.ok) {
                throw new Error(`Failed to load outline session: ${response.status}`);
            }

            const data = await response.json();
            setOutlineSession(data);
            setCurrentUserInput(data.userInput || '');

        } catch (err) {
            console.error('Error loading outline session:', err);
            setError(err instanceof Error ? err : new Error(String(err)));
        } finally {
            setIsLoadingSession(false);
        }
    };

    const handleStoryInspirationValueChange = useCallback((value: string) => {
        setCurrentUserInput(value);
    }, []);

    const handleArtifactChange = useCallback((newArtifactId: string | null) => {
        console.log('OutlineTab: Artifact ID changed from', currentArtifactId, 'to', newArtifactId);
        setCurrentArtifactId(newArtifactId);
        setStreamingOutlineData(null); // Clear previous streaming data when artifact changes
        setOutlineSessionIdFromStream(null); // Clear previous stream session ID
        if (eventSourceRef.current) { // Close any active stream
            eventSourceRef.current.close();
            eventSourceRef.current = null;
        }

        // Update URL with new artifact ID, but use replace: true to avoid navigation disruption
        if (newArtifactId) {
            const newSearchParams = new URLSearchParams();
            newSearchParams.set('artifact_id', newArtifactId);
            // Use replace: true and don't trigger a full navigation to preserve focus
            window.history.replaceState(null, '', `/new-outline?${newSearchParams.toString()}`);
        } else {
            // Clear artifact_id from URL if null
            window.history.replaceState(null, '', '/new-outline');
        }
    }, [currentArtifactId]);

    const handleGenerateOutline = async () => {
        if (!currentArtifactId) {
            console.warn('handleGenerateOutline: No currentArtifactId, cannot generate.');
            notification.error({ message: '错误', description: '没有有效的源灵感ID，无法生成大纲。' });
            return;
        }

        console.log('handleGenerateOutline: Initiating outline generation for artifactId:', currentArtifactId, 'with totalEpisodes:', totalEpisodes, 'episodeDuration:', episodeDuration);

        setIsLoading(true);
        setError(null);
        setStreamingOutlineData(null); // Clear previous stream data
        setOutlineSessionIdFromStream(null); // Clear previous stream session ID

        // Close any existing EventSource connection
        if (eventSourceRef.current) {
            eventSourceRef.current.close();
        }

        const apiUrl = `/api/outlines/from-artifact/${currentArtifactId}`;
        const eventSource = new EventSource(apiUrl, { withCredentials: true });
        eventSourceRef.current = eventSource;

        eventSource.onopen = () => {
            console.log('SSE connection opened for outline generation.');
            notification.info({ message: '连接成功', description: '正在生成大纲，请稍候...' });
        };

        eventSource.addEventListener('metadata', (event) => {
            console.log('SSE metadata event:', event.data);
            try {
                const meta = JSON.parse(event.data);
                if (meta.outlineSessionId) {
                    setOutlineSessionIdFromStream(meta.outlineSessionId);
                    console.log('Received outlineSessionId from stream:', meta.outlineSessionId);
                }
            } catch (e) {
                console.error('Failed to parse SSE metadata:', e);
            }
        });

        eventSource.onmessage = (event) => {
            // This is the default event for data chunks
            console.log('SSE data event:', event.data);
            try {
                const incomingData = JSON.parse(event.data) as Partial<OutlineData>;
                setStreamingOutlineData(prevData => ({
                    ...(prevData || {}),
                    ...incomingData
                }));
                if (isLoading) setIsLoading(false); // Stop global loading once first data arrives, rely on component for progressive view
            } catch (e) {
                console.error('Failed to parse SSE JSON data:', e);
                setError(new Error('无法解析实时数据流中的内容。'));
                // Don't close stream here, might get more data or error event
            }
        };

        eventSource.addEventListener('stream_end', (event) => {
            console.log('SSE stream_end event:', event.data);
            notification.success({ message: '成功', description: '大纲生成完成！' });
            setIsLoading(false);
            if (eventSourceRef.current) {
                eventSourceRef.current.close();
                eventSourceRef.current = null;
            }
            // Navigate after stream ends and we have the session ID
            if (outlineSessionIdFromStream) {
                navigate(`/outlines/${outlineSessionIdFromStream}`);
            } else {
                console.warn('Stream ended but outlineSessionIdFromStream is not set. Cannot navigate.');
                setError(new Error('大纲已生成，但无法获取会话ID进行跳转。'));
            }
        });

        const handleErrorEvent = (eventName: string, eventData: string) => {
            console.error(`SSE ${eventName} event:`, eventData);
            let errorDetails = { message: '未知流错误' };
            try {
                errorDetails = JSON.parse(eventData);
            } catch (e) { /* ignore parse error */ }
            setError(new Error(`大纲生成流错误: ${errorDetails.message}`));
            notification.error({ message: '流错误', description: `大纲生成过程中发生错误: ${errorDetails.message}` });
            setIsLoading(false);
            if (eventSourceRef.current) {
                eventSourceRef.current.close();
                eventSourceRef.current = null;
            }
        };

        eventSource.addEventListener('stream_error', (event) => handleErrorEvent('stream_error', event.data));
        eventSource.addEventListener('processing_error', (event) => handleErrorEvent('processing_error', event.data));
        eventSource.addEventListener('critical_error', (event) => handleErrorEvent('critical_error', event.data));

        eventSource.onerror = (err) => {
            console.error('SSE Error:', err);
            setError(new Error('大纲生成连接失败或中断。'));
            notification.error({ message: '连接错误', description: '与服务器的连接中断，请重试。' });
            setIsLoading(false);
            if (eventSourceRef.current) {
                eventSourceRef.current.close();
                eventSourceRef.current = null;
            }
        };
    };

    const handleBackToIdeation = () => {
        if (isCreationMode && currentArtifactId) {
            // Navigate back to ideation with artifact ID
            navigate(`/ideation?artifact_id=${currentArtifactId}`);
        } else if (isViewingMode && outlineSession) {
            navigate(`/ideation/${outlineSession.ideationSessionId}`);
        } else {
            navigate('/ideations');
        }
    };

    const renderOutlineComponents = () => {
        const dataToRender = streamingOutlineData || outlineSession?.outline;

        if (!dataToRender && isLoading) { // Show spinner if loading and no data yet
            return <div style={{ textAlign: 'center', margin: '50px' }}><Spin size="large" tip="正在加载大纲结构..." /></div>;
        }

        if (!dataToRender) {
            // If not loading and no data (e.g. before generation or if viewing an empty session)
            return isCreationMode ?
                <Alert message="请配置选项并点击生成大纲" type="info" showIcon /> :
                <Alert message="未找到大纲数据" type="warning" showIcon />;
        }

        const {
            title = "标题加载中...",
            genre = "类型加载中...",
            sellingPoints = "卖点加载中...",
            setting = "设定加载中...",
            synopsis = "梗概加载中...",
            characters = []
        } = dataToRender as Partial<OutlineData>; // Cast to partial to handle incomplete stream

        const baseComponents = [
            { label: '剧名', value: title, icon: '🎬', rows: 1 },
            { label: '题材类型', value: genre, icon: '🎭', rows: 1 },
            { label: '项目卖点/爽点', value: sellingPoints, icon: '⭐', rows: 4 },
            { label: '故事设定', value: setting, icon: '🌍', rows: 3 },
            { label: '故事梗概', value: synopsis, icon: '📖', rows: 6 }
        ];

        return (
            <div style={{ marginTop: '24px' }}>
                <Title level={4} style={{ color: '#ffffff', marginBottom: '24px', fontSize: '20px' }}>
                    故事大纲
                </Title>

                <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                    {baseComponents.map((component, index) => (
                        <Card
                            key={`base-${index}`}
                            size="small"
                            style={{
                                background: '#0f0f0f',
                                border: '1px solid #404040',
                                borderRadius: '8px',
                                padding: '20px'
                            }}
                        >
                            <div style={{ marginBottom: '12px' }}>
                                <Text strong style={{ fontSize: '18px', color: '#ffffff' }}>
                                    {component.icon} {component.label}
                                </Text>
                            </div>
                            <Input.TextArea
                                value={component.value}
                                readOnly
                                rows={component.rows}
                                style={{
                                    backgroundColor: '#1a1a1a',
                                    border: '1px solid #505050',
                                    color: '#e8e8e8',
                                    fontSize: '16px',
                                    lineHeight: '1.7',
                                    resize: 'none',
                                    cursor: 'default',
                                    fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif'
                                }}
                                autoSize={{ minRows: component.rows, maxRows: component.rows + 2 }}
                            />
                        </Card>
                    ))}

                    {characters && characters.length > 0 && (
                        <>
                            <Divider style={{ borderColor: '#404040', margin: '24px 0' }} />
                            <Title level={5} style={{ color: '#ffffff', marginBottom: '16px', fontSize: '18px' }}>
                                主要人物
                            </Title>
                            {characters.map((character, index) => (
                                <Card
                                    key={`char-${index}`}
                                    size="small"
                                    style={{
                                        background: '#0f0f0f',
                                        border: '1px solid #404040',
                                        borderRadius: '8px',
                                        padding: '20px'
                                    }}
                                >
                                    <div style={{ marginBottom: '12px' }}>
                                        <Text strong style={{ fontSize: '18px', color: '#ffffff' }}>
                                            👤 {character.name || "角色名加载中..."}
                                        </Text>
                                    </div>
                                    <Input.TextArea
                                        value={character.description || "描述加载中..."}
                                        readOnly
                                        rows={3} // Default rows for character description
                                        style={{
                                            backgroundColor: '#1a1a1a',
                                            border: '1px solid #505050',
                                            color: '#e8e8e8',
                                            fontSize: '16px',
                                            lineHeight: '1.7',
                                            resize: 'none',
                                            cursor: 'default',
                                            fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif'
                                        }}
                                        autoSize={{ minRows: 2, maxRows: 5 }}
                                    />
                                </Card>
                            ))}
                        </>
                    )}
                </div>
            </div>
        );
    };

    // Cleanup EventSource on component unmount
    useEffect(() => {
        return () => {
            if (eventSourceRef.current) {
                console.log('Cleaning up EventSource on OutlineTab unmount.');
                eventSourceRef.current.close();
                eventSourceRef.current = null;
            }
        };
    }, []);

    if (isLoadingSession) {
        return (
            <div style={{ padding: '20px', maxWidth: '800px', width: "100%", margin: '0 auto', overflow: "auto" }}>
                <div style={{ textAlign: 'center', padding: '40px' }}>
                    <Spin size="large" />
                    <div style={{ marginTop: '16px', color: '#d9d9d9' }}>加载大纲中...</div>
                </div>
            </div>
        );
    }

    return (
        <div style={{ padding: '20px', maxWidth: '800px', width: "100%", margin: '0 auto', overflow: "auto" }}>
            {/* Header */}
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    {/* <Button
                        icon={<ArrowLeftOutlined />}
                        onClick={handleBackToIdeation}
                        type="text"
                        style={{ color: '#1890ff' }}
                    >
                        返回
                    </Button> */}
                    <Title level={4} style={{ margin: 0, color: '#ffffff', fontSize: '20px' }}>
                        {isCreationMode ? '设计故事大纲' : '故事大纲详情'}
                    </Title>
                </div>
            </div>

            <Paragraph style={{ color: '#d0d0d0', marginBottom: '24px', fontSize: '16px', lineHeight: '1.6' }}>
                {isCreationMode
                    ? '基于你的故事灵感，AI将生成完整的故事大纲，包含剧名、题材类型、项目卖点、故事设定和故事梗概。'
                    : '这是根据故事灵感生成的完整大纲，包含了故事的核心要素。'
                }
            </Paragraph>

            {/* Story Inspiration Section */}
            {isCreationMode ? (
                <>
                    <StoryInspirationEditor
                        currentArtifactId={currentArtifactId || undefined}
                        onValueChange={handleStoryInspirationValueChange}
                        onArtifactChange={handleArtifactChange}
                        readOnly={isViewingMode}
                        placeholder="编辑你的故事灵感，然后生成大纲"
                    />
                    <Form layout="vertical" style={{ marginTop: '24px', marginBottom: '24px' }}>
                        <Space direction="horizontal" wrap align="start" size="large">
                            <Form.Item
                                label={<Text style={{ fontSize: '16px', color: '#e0e0e0' }}>总集数</Text>}
                                style={{ marginBottom: 0 }}
                            >
                                <InputNumber
                                    min={30}
                                    max={150}
                                    value={totalEpisodes}
                                    onChange={setTotalEpisodes}
                                    style={{ width: '120px', backgroundColor: '#1f1f1f', color: '#e0e0e0', borderColor: '#505050' }}
                                />
                                <Text type="secondary" style={{ marginLeft: '8px', color: '#a0a0a0' }}> (30-150集)</Text>
                            </Form.Item>
                            <Form.Item
                                label={<Text style={{ fontSize: '16px', color: '#e0e0e0' }}>每集时长 (分钟)</Text>}
                                style={{ marginBottom: 0 }}
                            >
                                <InputNumber
                                    min={1}
                                    max={10}
                                    value={episodeDuration}
                                    onChange={setEpisodeDuration}
                                    style={{ width: '120px', backgroundColor: '#1f1f1f', color: '#e0e0e0', borderColor: '#505050' }}
                                />
                                <Text type="secondary" style={{ marginLeft: '8px', color: '#a0a0a0' }}>(1-10分钟)</Text>
                            </Form.Item>
                        </Space>
                    </Form>
                </>
            ) : (
                <div style={{ marginBottom: '24px' }}>
                    <Text strong style={{ display: 'block', marginBottom: '12px', fontSize: '18px', color: '#ffffff' }}>
                        故事灵感
                    </Text>
                    <div style={{
                        padding: '20px',
                        background: '#0f0f0f',
                        border: '1px solid #505050',
                        borderRadius: '8px',
                        color: '#e8e8e8',
                        fontSize: '16px',
                        lineHeight: '1.7',
                        fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif'
                    }}>
                        {outlineSession?.userInput || '无故事灵感数据'}
                    </div>
                </div>
            )}

            {/* Generate Button (Creation Mode Only) */}
            {isCreationMode && currentUserInput.trim() && currentArtifactId && (
                <Button
                    type="primary"
                    icon={<FileTextOutlined />}
                    onClick={handleGenerateOutline}
                    loading={isLoading}
                    size="large"
                    style={{
                        marginBottom: '24px',
                        height: '44px',
                        fontSize: '16px',
                        fontWeight: '500',
                        background: '#52c41a',
                        borderColor: '#52c41a'
                    }}
                >
                    {isLoading ? '生成大纲中...' : '生成故事大纲'}
                </Button>
            )}

            {/* Error Display */}
            {error && (
                <Alert
                    message="生成失败"
                    description={error.message}
                    type="error"
                    showIcon
                    style={{ marginBottom: '16px' }}
                />
            )}

            {/* Loading State */}
            {isLoading && (
                <div style={{
                    textAlign: 'center',
                    padding: '40px',
                    border: '1px solid #303030',
                    borderRadius: '8px',
                    backgroundColor: '#141414'
                }}>
                    <Spin size="large" />
                    <div style={{ marginTop: '16px', color: '#d9d9d9' }}>
                        AI正在分析你的故事灵感，生成详细大纲...
                    </div>
                </div>
            )}

            {/* Outline Components (Viewing Mode) */}
            {isViewingMode && outlineSession && renderOutlineComponents()}

            {/* Status Info */}
            {isViewingMode && outlineSession && (
                <div style={{ marginTop: '32px', padding: '20px', background: '#0f0f0f', borderRadius: '8px', border: '1px solid #505050' }}>
                    <Text type="secondary" style={{ fontSize: '14px', color: '#c0c0c0' }}>
                        大纲状态: {outlineSession.status === 'completed' ? '已完成' : '进行中'} |
                        创建时间: {new Date(outlineSession.createdAt).toLocaleString('zh-CN')}
                    </Text>
                </div>
            )}
        </div>
    );
};

export default OutlineTab; 