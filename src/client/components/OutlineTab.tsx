import React, { useState, useEffect, useCallback } from 'react';
import { useParams, useNavigate, useSearchParams } from 'react-router-dom';
import { Button, Typography, Spin, Alert, Card, Divider, Input, InputNumber, Form, Space, Progress } from 'antd';
import { ArrowLeftOutlined, SendOutlined, FileTextOutlined, StopOutlined } from '@ant-design/icons';
import StoryInspirationEditor from './StoryInspirationEditor';
import { useStreamingOutline } from '../hooks/useStreamingOutline';
import { OutlineSection } from '../services/implementations/OutlineStreamingService';

const { Title, Text, Paragraph } = Typography;

interface OutlineData {
    title: string;
    genre: string;
    sellingPoints: string;
    setting: string;
    synopsis: string;
    characters: Array<{ name: string; description: string }>;
}

interface OutlineSessionData {
    sessionId: string;
    ideationSessionId: string;
    status: 'active' | 'completed';
    userInput?: string;
    outline?: OutlineData;
    createdAt: string;
}

const OutlineTab: React.FC = () => {
    const { id: outlineId } = useParams<{ id: string }>();
    const [searchParams] = useSearchParams();
    const navigate = useNavigate();

    // URL parameters
    const artifactId = searchParams.get('artifact_id');

    // State management
    const [currentUserInput, setCurrentUserInput] = useState('');
    const [currentArtifactId, setCurrentArtifactId] = useState<string | null>(artifactId);
    const [isLoading, setIsLoading] = useState(false);
    const [isLoadingSession, setIsLoadingSession] = useState(false);
    const [error, setError] = useState<Error | null>(null);
    const [outlineSession, setOutlineSession] = useState<OutlineSessionData | null>(null);
    // const [hasAutoGenerated, setHasAutoGenerated] = useState(false); // Track if auto-generation has been attempted - REMOVED

    // New state for outline generation options
    const [totalEpisodes, setTotalEpisodes] = useState<number | null>(50);
    const [episodeDuration, setEpisodeDuration] = useState<number | null>(2);
    const [transformId, setTransformId] = useState<string | undefined>();

    // Streaming hook for outline generation
    const { status, items, error: streamingError, stop } = useStreamingOutline(transformId);

    // Extract the latest outline data from streaming items
    const streamingOutline = items && items.length > 0 ? items[0] : null;
    const isStreaming = status === 'streaming';
    const isCompleted = status === 'completed';

    // Handle streaming completion
    useEffect(() => {
        if (isCompleted && transformId && !outlineId) {
            // Get the outline session ID from session storage
            const outlineSessionId = sessionStorage.getItem(`transform_${transformId}_session`);
            if (outlineSessionId) {
                // Navigate to the completed outline page after a short delay
                setTimeout(() => {
                    navigate(`/outlines/${outlineSessionId}`);
                    // Clean up session storage
                    sessionStorage.removeItem(`transform_${transformId}_session`);
                }, 1000);
            }
        }
    }, [isCompleted, transformId, outlineId, navigate]);

    // Determine if we're in creation mode or viewing mode
    const isCreationMode = !outlineId && artifactId;
    const isViewingMode = !!outlineId;

    // Load existing outline session if in viewing mode
    useEffect(() => {
        if (isViewingMode && outlineId) {
            loadOutlineSession(outlineId);
        }
    }, [outlineId, isViewingMode]);

    // Auto-generate outline when first navigating to creation mode with artifact_id
    /* REMOVED Auto-generation useEffect
    useEffect(() => {
        if (isCreationMode && currentArtifactId && !hasAutoGenerated && !isLoading) {
            console.log('Auto-generating outline for artifact:', currentArtifactId);
            setHasAutoGenerated(true);
            handleGenerateOutline();
        }
    }, [isCreationMode, currentArtifactId, hasAutoGenerated, isLoading]);
    */

    const loadOutlineSession = async (sessionId: string) => {
        setIsLoadingSession(true);
        setError(null);

        try {
            const response = await fetch(`/api/outlines/${sessionId}`);

            if (!response.ok) {
                throw new Error(`Failed to load outline session: ${response.status}`);
            }

            const data = await response.json();
            setOutlineSession(data);
            setCurrentUserInput(data.userInput || '');

        } catch (err) {
            console.error('Error loading outline session:', err);
            setError(err instanceof Error ? err : new Error(String(err)));
        } finally {
            setIsLoadingSession(false);
        }
    };

    const handleStoryInspirationValueChange = useCallback((value: string) => {
        setCurrentUserInput(value);
    }, []);

    const handleArtifactChange = useCallback((newArtifactId: string | null) => {
        console.log('OutlineTab: Artifact ID changed from', currentArtifactId, 'to', newArtifactId);
        setCurrentArtifactId(newArtifactId);

        // Update URL with new artifact ID, but use replace: true to avoid navigation disruption
        if (newArtifactId) {
            const newSearchParams = new URLSearchParams();
            newSearchParams.set('artifact_id', newArtifactId);
            // Use replace: true and don't trigger a full navigation to preserve focus
            window.history.replaceState(null, '', `/new-outline?${newSearchParams.toString()}`);
        } else {
            // Clear artifact_id from URL if null
            window.history.replaceState(null, '', '/new-outline');
        }
    }, [currentArtifactId]);

    const handleGenerateOutline = async () => {
        if (!currentArtifactId) {
            console.warn('handleGenerateOutline: No currentArtifactId, cannot generate.');
            return;
        }

        console.log('handleGenerateOutline: Creating outline job for artifactId:', currentArtifactId, 'with totalEpisodes:', totalEpisodes, 'episodeDuration:', episodeDuration);

        setError(null);
        setIsLoading(true);

        try {
            // Create outline job
            const response = await fetch('/api/outlines/create-job', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    sourceArtifactId: currentArtifactId,
                    totalEpisodes: totalEpisodes || undefined,
                    episodeDuration: episodeDuration || undefined
                })
            });

            if (!response.ok) {
                throw new Error(`Failed to create outline job: ${response.status}`);
            }

            const { outlineSessionId, transformId: newTransformId } = await response.json();

            // Set transform ID to start streaming
            setTransformId(newTransformId);

            // Store the outline session ID for navigation after completion
            sessionStorage.setItem(`transform_${newTransformId}_session`, outlineSessionId);

        } catch (err) {
            console.error('Error creating outline job:', err);
            setError(err instanceof Error ? err : new Error(String(err)));
        } finally {
            setIsLoading(false);
        }
    };

    const handleBackToIdeation = () => {
        if (isCreationMode && currentArtifactId) {
            // Navigate back to ideation with artifact ID
            navigate(`/ideation?artifact_id=${currentArtifactId}`);
        } else if (isViewingMode && outlineSession) {
            navigate(`/ideation/${outlineSession.ideationSessionId}`);
        } else {
            navigate('/ideations');
        }
    };

    const renderOutlineComponents = () => {
        if (!outlineSession?.outline) {
            return null;
        }

        const { title, genre, sellingPoints, setting, synopsis, characters } = outlineSession.outline;

        const baseComponents = [
            { label: '剧名', value: title, icon: '🎬', rows: 1 },
            { label: '题材类型', value: genre, icon: '🎭', rows: 1 },
            { label: '项目卖点/爽点', value: sellingPoints, icon: '⭐', rows: 4 },
            { label: '故事设定', value: setting, icon: '🌍', rows: 3 },
            { label: '故事梗概', value: synopsis, icon: '📖', rows: 6 }
        ];

        return (
            <div style={{ marginTop: '24px' }}>
                <Title level={4} style={{ color: '#ffffff', marginBottom: '24px', fontSize: '20px' }}>
                    故事大纲
                </Title>

                <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                    {baseComponents.map((component, index) => (
                        <Card
                            key={`base-${index}`}
                            size="small"
                            style={{
                                background: '#0f0f0f',
                                border: '1px solid #404040',
                                borderRadius: '8px',
                                padding: '20px'
                            }}
                        >
                            <div style={{ marginBottom: '12px' }}>
                                <Text strong style={{ fontSize: '18px', color: '#ffffff' }}>
                                    {component.icon} {component.label}
                                </Text>
                            </div>
                            <Input.TextArea
                                value={component.value}
                                readOnly
                                rows={component.rows}
                                style={{
                                    backgroundColor: '#1a1a1a',
                                    border: '1px solid #505050',
                                    color: '#e8e8e8',
                                    fontSize: '16px',
                                    lineHeight: '1.7',
                                    resize: 'none',
                                    cursor: 'default',
                                    fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif'
                                }}
                                autoSize={{ minRows: component.rows, maxRows: component.rows + 2 }}
                            />
                        </Card>
                    ))}

                    {characters && characters.length > 0 && (
                        <>
                            <Divider style={{ borderColor: '#404040', margin: '24px 0' }} />
                            <Title level={5} style={{ color: '#ffffff', marginBottom: '16px', fontSize: '18px' }}>
                                主要人物
                            </Title>
                            {characters.map((character, index) => (
                                <Card
                                    key={`char-${index}`}
                                    size="small"
                                    style={{
                                        background: '#0f0f0f',
                                        border: '1px solid #404040',
                                        borderRadius: '8px',
                                        padding: '20px'
                                    }}
                                >
                                    <div style={{ marginBottom: '12px' }}>
                                        <Text strong style={{ fontSize: '18px', color: '#ffffff' }}>
                                            👤 {character.name}
                                        </Text>
                                    </div>
                                    <Input.TextArea
                                        value={character.description}
                                        readOnly
                                        rows={3} // Default rows for character description
                                        style={{
                                            backgroundColor: '#1a1a1a',
                                            border: '1px solid #505050',
                                            color: '#e8e8e8',
                                            fontSize: '16px',
                                            lineHeight: '1.7',
                                            resize: 'none',
                                            cursor: 'default',
                                            fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif'
                                        }}
                                        autoSize={{ minRows: 2, maxRows: 5 }}
                                    />
                                </Card>
                            ))}
                        </>
                    )}
                </div>
            </div>
        );
    };

    if (isLoadingSession) {
        return (
            <div style={{ padding: '20px', maxWidth: '800px', width: "100%", margin: '0 auto', overflow: "auto" }}>
                <div style={{ textAlign: 'center', padding: '40px' }}>
                    <Spin size="large" />
                    <div style={{ marginTop: '16px', color: '#d9d9d9' }}>加载大纲中...</div>
                </div>
            </div>
        );
    }

    return (
        <div style={{ padding: '20px', maxWidth: '800px', width: "100%", margin: '0 auto', overflow: "auto" }}>
            <style>
                {`
                    @keyframes blink {
                        0%, 50% { opacity: 1; }
                        51%, 100% { opacity: 0; }
                    }
                    @keyframes fadeIn {
                        from { opacity: 0; transform: translateY(10px); }
                        to { opacity: 1; transform: translateY(0); }
                    }
                `}
            </style>
            {/* Header */}
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    {/* <Button
                        icon={<ArrowLeftOutlined />}
                        onClick={handleBackToIdeation}
                        type="text"
                        style={{ color: '#1890ff' }}
                    >
                        返回
                    </Button> */}
                    <Title level={4} style={{ margin: 0, color: '#ffffff', fontSize: '20px' }}>
                        {isCreationMode ? '设计故事大纲' : '故事大纲详情'}
                    </Title>
                </div>
            </div>

            <Paragraph style={{ color: '#d0d0d0', marginBottom: '24px', fontSize: '16px', lineHeight: '1.6' }}>
                {isCreationMode
                    ? '基于你的故事灵感，AI将生成完整的故事大纲，包含剧名、题材类型、项目卖点、故事设定和故事梗概。'
                    : '这是根据故事灵感生成的完整大纲，包含了故事的核心要素。'
                }
            </Paragraph>

            {/* Story Inspiration Section */}
            {isCreationMode ? (
                <>
                    <StoryInspirationEditor
                        currentArtifactId={currentArtifactId || undefined}
                        onValueChange={handleStoryInspirationValueChange}
                        onArtifactChange={handleArtifactChange}
                        readOnly={isViewingMode}
                        placeholder="编辑你的故事灵感，然后生成大纲"
                    />
                    <Form layout="vertical" style={{ marginTop: '24px', marginBottom: '24px' }}>
                        <Space direction="horizontal" wrap align="start" size="large">
                            <Form.Item
                                label={<Text style={{ fontSize: '16px', color: '#e0e0e0' }}>总集数</Text>}
                                style={{ marginBottom: 0 }}
                            >
                                <InputNumber
                                    min={30}
                                    max={150}
                                    value={totalEpisodes}
                                    onChange={setTotalEpisodes}
                                    style={{ width: '120px', backgroundColor: '#1f1f1f', color: '#e0e0e0', borderColor: '#505050' }}
                                />
                                <Text type="secondary" style={{ marginLeft: '8px', color: '#a0a0a0' }}> (30-150集)</Text>
                            </Form.Item>
                            <Form.Item
                                label={<Text style={{ fontSize: '16px', color: '#e0e0e0' }}>每集时长 (分钟)</Text>}
                                style={{ marginBottom: 0 }}
                            >
                                <InputNumber
                                    min={1}
                                    max={10}
                                    value={episodeDuration}
                                    onChange={setEpisodeDuration}
                                    style={{ width: '120px', backgroundColor: '#1f1f1f', color: '#e0e0e0', borderColor: '#505050' }}
                                />
                                <Text type="secondary" style={{ marginLeft: '8px', color: '#a0a0a0' }}>(1-10分钟)</Text>
                            </Form.Item>
                        </Space>
                    </Form>
                </>
            ) : (
                <div style={{ marginBottom: '24px' }}>
                    <Text strong style={{ display: 'block', marginBottom: '12px', fontSize: '18px', color: '#ffffff' }}>
                        故事灵感
                    </Text>
                    <div style={{
                        padding: '20px',
                        background: '#0f0f0f',
                        border: '1px solid #505050',
                        borderRadius: '8px',
                        color: '#e8e8e8',
                        fontSize: '16px',
                        lineHeight: '1.7',
                        fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif'
                    }}>
                        {outlineSession?.userInput || '无故事灵感数据'}
                    </div>
                </div>
            )}

            {/* Generate Button (Creation Mode Only) */}
            {isCreationMode && currentUserInput.trim() && currentArtifactId && (
                <div style={{ marginBottom: '24px' }}>
                    <Button
                        type="primary"
                        icon={isStreaming ? <StopOutlined /> : <FileTextOutlined />}
                        onClick={isStreaming ? stop : handleGenerateOutline}
                        loading={false}
                        size="large"
                        style={{
                            height: '44px',
                            fontSize: '16px',
                            fontWeight: '500',
                            background: isStreaming ? '#ff4d4f' : '#52c41a',
                            borderColor: isStreaming ? '#ff4d4f' : '#52c41a',
                            marginRight: '12px'
                        }}
                    >
                        {isStreaming ? '停止生成' : '生成故事大纲'}
                    </Button>

                    {/* Streaming Progress */}
                    {isStreaming && (
                        <div style={{ marginTop: '16px' }}>
                            <div style={{ marginBottom: '8px' }}>
                                <Text style={{ color: '#1890ff' }}>
                                    正在生成故事大纲...
                                </Text>
                            </div>
                            <Progress
                                percent={undefined}
                                status="active"
                                showInfo={false}
                                style={{ marginBottom: '8px' }}
                            />
                        </div>
                    )}
                </div>
            )}

            {/* Error Display */}
            {(error || streamingError) && (
                <Alert
                    message="生成失败"
                    description={(error || streamingError)?.message}
                    type="error"
                    showIcon
                    style={{ marginBottom: '16px' }}
                />
            )}

            {/* Streaming Content Display - Progressive Outline */}
            {isCreationMode && (isStreaming || (streamingOutline && !isCompleted)) && streamingOutline && (
                <div style={{ marginBottom: '24px' }}>
                    <Title level={4} style={{ color: '#ffffff', marginBottom: '24px', fontSize: '20px' }}>
                        {isStreaming ? '正在生成故事大纲...' : '故事大纲'}
                    </Title>

                    <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                        {/* Title */}
                        {streamingOutline.title && (
                            <Card
                                size="small"
                                style={{
                                    background: '#0f0f0f',
                                    border: '1px solid #404040',
                                    borderRadius: '8px',
                                    padding: '20px',
                                    animation: 'fadeIn 0.5s ease-in-out'
                                }}
                            >
                                <div style={{ marginBottom: '12px' }}>
                                    <Text strong style={{ fontSize: '18px', color: '#ffffff' }}>
                                        🎬 剧名
                                    </Text>
                                </div>
                                <Text style={{ fontSize: '16px', color: '#e8e8e8' }}>
                                    {streamingOutline.title}
                                </Text>
                            </Card>
                        )}

                        {/* Genre */}
                        {streamingOutline.genre && (
                            <Card
                                size="small"
                                style={{
                                    background: '#0f0f0f',
                                    border: '1px solid #404040',
                                    borderRadius: '8px',
                                    padding: '20px',
                                    animation: 'fadeIn 0.5s ease-in-out'
                                }}
                            >
                                <div style={{ marginBottom: '12px' }}>
                                    <Text strong style={{ fontSize: '18px', color: '#ffffff' }}>
                                        🎭 题材类型
                                    </Text>
                                </div>
                                <Text style={{ fontSize: '16px', color: '#e8e8e8' }}>
                                    {streamingOutline.genre}
                                </Text>
                            </Card>
                        )}

                        {/* Selling Points */}
                        {streamingOutline.selling_points && streamingOutline.selling_points.length > 0 && (
                            <Card
                                size="small"
                                style={{
                                    background: '#0f0f0f',
                                    border: '1px solid #404040',
                                    borderRadius: '8px',
                                    padding: '20px',
                                    animation: 'fadeIn 0.5s ease-in-out'
                                }}
                            >
                                <div style={{ marginBottom: '12px' }}>
                                    <Text strong style={{ fontSize: '18px', color: '#ffffff' }}>
                                        ⭐ 项目卖点/爽点
                                    </Text>
                                </div>
                                <div>
                                    {streamingOutline.selling_points.map((point, index) => (
                                        <div key={index} style={{ marginBottom: '8px' }}>
                                            <Text style={{ fontSize: '16px', color: '#e8e8e8' }}>
                                                • {point}
                                            </Text>
                                        </div>
                                    ))}
                                </div>
                            </Card>
                        )}

                        {/* Setting */}
                        {streamingOutline.setting && (
                            <Card
                                size="small"
                                style={{
                                    background: '#0f0f0f',
                                    border: '1px solid #404040',
                                    borderRadius: '8px',
                                    padding: '20px',
                                    animation: 'fadeIn 0.5s ease-in-out'
                                }}
                            >
                                <div style={{ marginBottom: '12px' }}>
                                    <Text strong style={{ fontSize: '18px', color: '#ffffff' }}>
                                        🌍 故事设定
                                    </Text>
                                </div>
                                {streamingOutline.setting.core_setting_summary && (
                                    <div style={{ marginBottom: '12px' }}>
                                        <Text style={{ fontSize: '16px', color: '#e8e8e8' }}>
                                            {streamingOutline.setting.core_setting_summary}
                                        </Text>
                                    </div>
                                )}
                                {streamingOutline.setting.key_scenes && streamingOutline.setting.key_scenes.length > 0 && (
                                    <div>
                                        <Text strong style={{ fontSize: '14px', color: '#d0d0d0', display: 'block', marginBottom: '8px' }}>
                                            关键场景：
                                        </Text>
                                        {streamingOutline.setting.key_scenes.map((scene, index) => (
                                            <div key={index} style={{ marginBottom: '4px' }}>
                                                <Text style={{ fontSize: '14px', color: '#bfbfbf' }}>
                                                    • {scene}
                                                </Text>
                                            </div>
                                        ))}
                                    </div>
                                )}
                            </Card>
                        )}

                        {/* Characters */}
                        {streamingOutline.main_characters && streamingOutline.main_characters.length > 0 && (
                            <div>
                                <Title level={5} style={{ color: '#ffffff', marginBottom: '16px', fontSize: '18px' }}>
                                    主要人物
                                </Title>
                                {streamingOutline.main_characters.map((character, index) => (
                                    <Card
                                        key={index}
                                        size="small"
                                        style={{
                                            background: '#0f0f0f',
                                            border: '1px solid #404040',
                                            borderRadius: '8px',
                                            padding: '20px',
                                            marginBottom: '12px',
                                            animation: 'fadeIn 0.5s ease-in-out'
                                        }}
                                    >
                                        <div style={{ marginBottom: '8px' }}>
                                            <Text strong style={{ fontSize: '16px', color: '#ffffff' }}>
                                                👤 {character.name}
                                            </Text>
                                        </div>
                                        <Text style={{ fontSize: '14px', color: '#e8e8e8' }}>
                                            {character.description}
                                        </Text>
                                    </Card>
                                ))}
                            </div>
                        )}

                        {/* Synopsis */}
                        {streamingOutline.synopsis && (
                            <Card
                                size="small"
                                style={{
                                    background: '#0f0f0f',
                                    border: '1px solid #404040',
                                    borderRadius: '8px',
                                    padding: '20px',
                                    animation: 'fadeIn 0.5s ease-in-out'
                                }}
                            >
                                <div style={{ marginBottom: '12px' }}>
                                    <Text strong style={{ fontSize: '18px', color: '#ffffff' }}>
                                        📖 故事梗概
                                    </Text>
                                </div>
                                <Text style={{ fontSize: '16px', color: '#e8e8e8', lineHeight: '1.7', whiteSpace: 'pre-wrap' }}>
                                    {streamingOutline.synopsis}
                                </Text>
                            </Card>
                        )}

                        {/* Blinking cursor while still streaming */}
                        {isStreaming && (
                            <div style={{
                                padding: '8px',
                                color: '#1890ff',
                                fontSize: '18px',
                                textAlign: 'center'
                            }}>
                                <span style={{ animation: 'blink 1s infinite' }}>▋</span>
                            </div>
                        )}
                    </div>
                </div>
            )}

            {/* Loading State - only show when not streaming */}
            {isLoading && !isStreaming && (
                <div style={{
                    textAlign: 'center',
                    padding: '40px',
                    border: '1px solid #303030',
                    borderRadius: '8px',
                    backgroundColor: '#141414'
                }}>
                    <Spin size="large" />
                    <div style={{ marginTop: '16px', color: '#d9d9d9' }}>
                        AI正在分析你的故事灵感，生成详细大纲...
                    </div>
                </div>
            )}

            {/* Outline Components (Viewing Mode) */}
            {isViewingMode && outlineSession && renderOutlineComponents()}

            {/* Status Info */}
            {isViewingMode && outlineSession && (
                <div style={{ marginTop: '32px', padding: '20px', background: '#0f0f0f', borderRadius: '8px', border: '1px solid #505050' }}>
                    <Text type="secondary" style={{ fontSize: '14px', color: '#c0c0c0' }}>
                        大纲状态: {outlineSession.status === 'completed' ? '已完成' : '进行中'} |
                        创建时间: {new Date(outlineSession.createdAt).toLocaleString('zh-CN')}
                    </Text>
                </div>
            )}
        </div>
    );
};

export default OutlineTab; 