import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { createBrainstormToolDefinition } from '../tools/BrainstormTools';
import { createOutlineSettingsToolDefinition } from '../tools/OutlineSettingsTool';
import { createChroniclesToolDefinition } from '../tools/ChroniclesTool';
import { JsonDocRepository } from '../transform-jsonDoc-framework/JsonDocRepository';
import { TransformRepository } from '../transform-jsonDoc-framework/TransformRepository';
import { createMockJsonDocRepository, createMockTransformRepository } from '../../__tests__/mocks/databaseMocks';
import { TypedJsonDoc } from '@/common/types';

describe('End-to-End Workflow Tests', () => {
    let mockJsonDocRepo: any;
    let mockTransformRepo: any;
    const testProjectId = 'test-project-123';
    const testUserId = 'test-user-456';

    beforeEach(() => {
        mockJsonDocRepo = createMockJsonDocRepository();
        mockTransformRepo = createMockTransformRepository();

        // Setup mock getJsonDoc to return proper jsonDoc data
        mockJsonDocRepo.getJsonDoc.mockImplementation(async (id: string) => {
            if (!id) return null;

            // Check for outline settings first (mock-jsonDoc-2 should be outline settings)
            if (id === 'mock-jsonDoc-2' || id === 'mock-jsonDoc-3' || id === 'mock-jsonDoc-4' || id.includes('outline')) {
                return {
                    id: id,
                    project_id: testProjectId,
                    type: 'outline_settings',
                    data: {
                        title: 'ÈÉΩÂ∏ÇÁîúÂÆ†ÊïÖ‰∫ã',
                        genre: 'Áé∞‰ª£ÁîúÂÆ†',
                        target_audience: '18-35Â≤ÅÈÉΩÂ∏ÇÂ•≥ÊÄß',
                        platform: 'ÊäñÈü≥',
                        selling_points: ['Èú∏ÊÄªÁîúÂÆ†', 'ËØØ‰ºöÈáçÈáç'],
                        satisfaction_points: ['ÁîúËúú‰∫íÂä®', 'Èú∏ÈÅìÊÄªË£Å'],
                        setting: {
                            time_period: 'Áé∞‰ª£',
                            location: '‰∏äÊµ∑',
                            social_context: 'ÈÉΩÂ∏ÇËÅåÂú∫'
                        },
                        characters: [
                            {
                                name: 'ÊûóÊôìÈõ®',
                                type: 'female_lead',
                                age: '25Â≤Å',
                                occupation: 'ËÆæËÆ°Â∏à',
                                personality: 'Áã¨Á´ãÂùöÂº∫',
                                appearance: 'Ê∏ÖÁ∫ØÂèØÁà±',
                                background: 'ÊôÆÈÄöÂÆ∂Â∫≠Âá∫Ë∫´'
                            }
                        ]
                    },
                    schema_type: 'outline_settings' as TypedJsonDoc['schema_type'],
                    origin_type: 'ai_generated'
                };
            } else if (id.includes('brainstorm') || id === 'mock-jsonDoc-1') {
                // Return brainstorm_idea with user_input schema (from human transform)
                return {
                    id: id,
                    project_id: testProjectId,
                    schema_type: 'brainstorm_idea' as TypedJsonDoc['schema_type'],
                    data: {
                        title: 'Áé∞‰ª£ÈÉΩÂ∏ÇÁîúÂÆ†',
                        body: '‰∏Ä‰∏™ÂÖ≥‰∫éÈÉΩÂ∏ÇÁôΩÈ¢ÜÁöÑÁîúÂÆ†ÊïÖ‰∫ãÔºåÁî∑Â•≥‰∏ªËßíÂú®ËÅåÂú∫Áõ∏ÈÅáÔºåÁªèÂéÜËØØ‰ºöÂêéËµ∞Âà∞‰∏ÄËµ∑'
                    },
                    origin_type: 'user_input',
                    metadata: {
                        derived_data: {
                            title: 'Áé∞‰ª£ÈÉΩÂ∏ÇÁîúÂÆ†',
                            body: '‰∏Ä‰∏™ÂÖ≥‰∫éÈÉΩÂ∏ÇÁôΩÈ¢ÜÁöÑÁîúÂÆ†ÊïÖ‰∫ãÔºåÁî∑Â•≥‰∏ªËßíÂú®ËÅåÂú∫Áõ∏ÈÅáÔºåÁªèÂéÜËØØ‰ºöÂêéËµ∞Âà∞‰∏ÄËµ∑'
                        }
                    }
                };
            } else if (id.includes('input') || id === 'test-brainstorm-input') {
                // Return brainstorm input jsonDoc
                return {
                    id: id,
                    project_id: testProjectId,
                    schema_type: 'brainstorm_input_params' as TypedJsonDoc['schema_type'],
                    data: {
                        platform: 'ÊäñÈü≥',
                        genre: 'Áé∞‰ª£ÁîúÂÆ†',
                        other_requirements: 'ÁîüÊàê3‰∏™ÊïÖ‰∫ãÂàõÊÑè',
                        numberOfIdeas: 3
                    },
                    origin_type: 'user_input'
                };
            }
            return null;
        });

        // Setup mock createJsonDoc to return sequential IDs
        let jsonDocCounter = 1;
        mockJsonDocRepo.createJsonDoc.mockImplementation(async () => {
            const jsonDocId = `mock-jsonDoc-${jsonDocCounter++}`;
            return { id: jsonDocId };
        });

        // Setup mock createTransform to return sequential IDs
        let transformCounter = 1;
        mockTransformRepo.createTransform.mockImplementation(async () => {
            return { id: `mock-transform-${transformCounter++}` };
        });
    });

    afterEach(() => {
        // Reset any global state if needed
    });

    it('should execute complete workflow: brainstorm ‚Üí outline settings ‚Üí chronicles', async () => {
        // Disable caching to use mock responses with new schema
        const cachingOptions = { enableCaching: false };

        console.log('üß™ Testing complete workflow with new outline system...');

        // Step 1: Generate brainstorm ideas
        const brainstormTool = createBrainstormToolDefinition(
            mockTransformRepo,
            mockJsonDocRepo,
            testProjectId,
            testUserId,
            cachingOptions
        );

        const brainstormInput = {
            sourceJsonDocId: 'test-brainstorm-input',
            otherRequirements: 'ÁîüÊàê3‰∏™ÊïÖ‰∫ãÂàõÊÑè'
        };

        console.log('üìù Step 1: Generating brainstorm ideas...');
        const brainstormResult = await brainstormTool.execute(brainstormInput, { toolCallId: 'test-brainstorm' });

        expect(brainstormResult).toBeDefined();
        expect(brainstormResult.outputJsonDocId).toBeDefined();
        expect(brainstormResult.finishReason).toBeDefined();

        console.log(`‚úÖ Brainstorm completed: ${brainstormResult.outputJsonDocId}`);

        // Step 2: Generate outline settings from brainstorm
        const outlineSettingsTool = createOutlineSettingsToolDefinition(
            mockTransformRepo,
            mockJsonDocRepo,
            testProjectId,
            testUserId,
            cachingOptions
        );

        const outlineSettingsInput = {
            sourceJsonDocId: brainstormResult.outputJsonDocId,
            title: 'Áé∞‰ª£ÁîúÂÆ†ÊïÖ‰∫ãËÆæÂÆö',
            requirements: 'ÂàõÂª∫ËØ¶ÁªÜÁöÑÂâßÊú¨Ê°ÜÊû∂ÔºåÂåÖÊã¨ËßíËâ≤ËÉåÊôØÂíåÂïÜ‰∏öÂÆö‰Ωç'
        };

        console.log('üé≠ Step 2: Generating outline settings...');
        const outlineSettingsResult = await outlineSettingsTool.execute(outlineSettingsInput, { toolCallId: 'test-outline-settings' });

        expect(outlineSettingsResult).toBeDefined();
        expect(outlineSettingsResult.outputJsonDocId).toBeDefined();
        expect(outlineSettingsResult.finishReason).toBeDefined();

        console.log(`‚úÖ Outline settings completed: ${outlineSettingsResult.outputJsonDocId}`);

        // Step 3: Generate chronicles from outline settings
        const chroniclesTool = createChroniclesToolDefinition(
            mockTransformRepo,
            mockJsonDocRepo,
            testProjectId,
            testUserId,
            cachingOptions
        );

        const chroniclesInput = {
            sourceJsonDocId: outlineSettingsResult.outputJsonDocId,
            requirements: 'ÂàõÂª∫ÊåâÊó∂Èó¥È°∫Â∫èÁöÑÊïÖ‰∫ãÂèëÂ±ïËÑâÁªú'
        };

        console.log('‚è∞ Step 3: Generating chronicles...');
        const chroniclesResult = await chroniclesTool.execute(chroniclesInput, { toolCallId: 'test-chronicles' });

        expect(chroniclesResult).toBeDefined();
        expect(chroniclesResult.outputJsonDocId).toBeDefined();
        expect(chroniclesResult.finishReason).toBeDefined();

        console.log(`‚úÖ Chronicles completed: ${chroniclesResult.outputJsonDocId}`);

        // Verify the complete workflow chain
        console.log('üîó Verifying workflow chain...');

        // Check that all jsonDocs were created
        expect(brainstormResult.outputJsonDocId).toBeDefined();
        expect(outlineSettingsResult.outputJsonDocId).toBeDefined();
        expect(chroniclesResult.outputJsonDocId).toBeDefined();

        // Verify they're all different jsonDocs
        expect(brainstormResult.outputJsonDocId).not.toBe(outlineSettingsResult.outputJsonDocId);
        expect(outlineSettingsResult.outputJsonDocId).not.toBe(chroniclesResult.outputJsonDocId);
        expect(brainstormResult.outputJsonDocId).not.toBe(chroniclesResult.outputJsonDocId);

        console.log('‚úÖ Complete workflow test passed!');
    });

    it('should validate tool definitions and schemas', async () => {
        console.log('üîç Testing tool definitions...');

        const cachingOptions = { enableCaching: false };

        // Test brainstorm tool
        const brainstormTool = createBrainstormToolDefinition(
            mockTransformRepo,
            mockJsonDocRepo,
            testProjectId,
            testUserId,
            cachingOptions
        );

        expect(brainstormTool).toBeDefined();
        expect(brainstormTool.execute).toBeInstanceOf(Function);
        expect(brainstormTool.name).toBe('generate_brainstorm_ideas');

        // Test outline settings tool
        const outlineSettingsTool = createOutlineSettingsToolDefinition(
            mockTransformRepo,
            mockJsonDocRepo,
            testProjectId,
            testUserId,
            cachingOptions
        );

        expect(outlineSettingsTool).toBeDefined();
        expect(outlineSettingsTool.execute).toBeInstanceOf(Function);
        expect(outlineSettingsTool.name).toBe('generate_outline_settings');

        // Test chronicles tool
        const chroniclesTool = createChroniclesToolDefinition(
            mockTransformRepo,
            mockJsonDocRepo,
            testProjectId,
            testUserId,
            cachingOptions
        );

        expect(chroniclesTool).toBeDefined();
        expect(chroniclesTool.execute).toBeInstanceOf(Function);
        expect(chroniclesTool.name).toBe('generate_chronicles');

        console.log('‚úÖ All tool definitions validated!');
    });
}); 