# Script Writer Project - Cursor Rules

## Core Architecture Principles

### 1. Artifacts & Transforms System
- **ALWAYS respect the artifacts => transform => artifacts structure** when changing backend flow logic
- Every data modification MUST be tracked through transforms with proper input/output artifact relationships
- Artifacts are immutable - create new versions rather than modifying existing ones
- Use `TransformExecutor` for all data modifications that need traceability
- Transforms must specify type ('llm' or 'human'), execution context, and status

### 2. API Design Philosophy
- **DO NOT expose artifacts/transforms directly** in server routes - they are low-level constructs
- **DO NOT make frontend interact with artifacts/transforms directly**
- Create domain-specific endpoints (e.g., `/api/projects`, `/api/scripts`) that abstract the underlying artifacts system
- Frontend should work with business domain objects (IdeationRun, ScriptDocument) not raw artifacts
- Use repository pattern to encapsulate artifact/transform operations

## Security & Authentication

### 3. Authentication Requirements
- **ALL AI/LLM endpoints MUST require authentication** using `requireAuth` middleware
- **ALL data operations MUST be scoped to authenticated user** (`user_id` filtering)
- Use HTTP-only cookies for JWT tokens to prevent XSS attacks
- Validate user ownership before allowing access to any resource
- Room IDs must include user ID for WebSocket security: `script-{user_id}-{timestamp}-{random}`

### 4. Data Isolation
- Every database query MUST filter by user_id for the authenticated user
- Users can ONLY access their own scripts, ideations, and collaborative sessions
- WebSocket connections must verify room ownership before allowing access
- Debug endpoints must scope data to authenticated user only

### 5. Debug Authentication
- **For development/testing**: Use debug token `debug-auth-token-script-writer-dev` in Authorization header
- Debug token bypasses JWT validation and authenticates as test-user-1
- Example: `Authorization: Bearer debug-auth-token-script-writer-dev`
- **NEVER use debug token in production** - only for local development and testing

## TypeScript & Code Organization

### 6. Type Safety
- Use strict TypeScript throughout both frontend and backend
- **ALWAYS define shared types in `src/common/`** - whenever types can be shared between frontend and backend, they MUST be placed under `/src/common` for consistency and single source of truth
- Define interfaces with version suffixes (e.g., `IdeationSessionV1`) for artifact types
- Properly type all streaming services and API responses
- Frontend-only types go in `src/client/types/`, backend-only types go in `src/server/types/`

### 7. File Structure
```
src/
├── client/                 # React frontend
│   ├── components/        # UI components with streaming support
│   ├── hooks/            # Custom hooks including streaming hooks
│   ├── services/         # RxJS streaming services
│   └── types/            # Frontend-specific types
├── common/               # Shared types and interfaces
│   ├── streaming/        # Streaming interfaces
│   └── llm/             # LLM template types
└── server/               # Express backend
    ├── routes/           # API routes (domain-focused)
    ├── services/         # Business logic with transform execution
    ├── repositories/     # Data access layer (artifacts/transforms)
    └── middleware/       # Authentication and validation
```

### 8. UI Component Standards
- **ALWAYS use Ant Design components and facilities** when building UI components
- Prefer Ant Design's built-in components over custom CSS implementations
- Use Ant Design's theming system for consistent dark theme styling
- Leverage Ant Design's icons, layout components, form controls, and feedback components
- Only create custom CSS when Ant Design doesn't provide the needed functionality
- Follow Ant Design's design principles and component patterns


## Database & Performance

### 10. Database Operations
- Use `ArtifactRepository` and `TransformRepository` for flow related data access
- Use `UnifiedStreamingService` for streaming data and real-time state management


## API Endpoint Patterns

### 12. Route Organization
- Group routes by domain: `/api/projects`, `/api/scripts`, `/api/brainstorm`
- Use RESTful conventions where appropriate
- Streaming endpoints use `/stream` suffix
- Debug endpoints under `/debug/` (development only)
- Authentication endpoints under `/auth/`

### 13. Request/Response Patterns
- Always validate input parameters
- Return domain objects, not raw artifacts
- Include proper error handling with user-friendly messages
- Use consistent response formats across endpoints
- Include pagination for list endpoints


## Development & Testing

### 16. Error Handling
- Use try-catch blocks for all async operations
- Log errors with sufficient context for debugging
- Return appropriate HTTP status codes
- Include user-friendly error messages for frontend

### 17. TypeScript Script Execution
- **ALWAYS use `./run-ts` when running TypeScript Node.js scripts** - never use `npx tsx` or `node` directly
- The `./run-ts` script handles proper TypeScript configuration, dotenv loading, and module resolution
- Example: `./run-ts src/server/test-script.ts` instead of `npx tsx src/server/test-script.ts`
- run-ts can only run typescript files. Do not run inline script. Always write down the script in TS file(s).

### 18. Debugging & Analytics
- If a new flow is constructed or modified, test by creating a node.js only testing script that executes transforms

## Data Validation

### 19. Input Validation
- Validate all input data at API boundaries
- Use TypeScript for compile-time type checking
- Include runtime validation for external data
- Test edge cases and error conditions

### Electric Doc

For Electric specific implementations, refer to /electric-llms.txt
